
<div class="absolute inset-y-0 start-0 flex items-center ps-3 pointer-events-none">
    <svg
            class="w-4 h-4 text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
            fill="none" viewBox="0 0 20 20"
    >
        <path
                stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"
                stroke-width="2"
                d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z"
        />
    </svg>
</div>

<input
        type="text" id="search-navbar" name="search"
        class="block w-full p-2 ps-10 text-sm text-black border rounded-lg bg-gray-700 border-gray-600 placeholder-gray-400"
        placeholder="Rechercher..."
>
<button data-modal-target="crud-modal" data-modal-show="crud-modal"class="absolute inset-y-0 end-0 flex items-center pe-3 right-0 px-2">

    <svg class="w-4 h-4 text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 12.25V1m0 11.25a2.25 2.25 0 0 0 0 4.5m0-4.5a2.25 2.25 0 0 1 0 4.5M4 19v-2.25m6-13.5V1m0 2.25a2.25 2.25 0 0 0 0 4.5m0-4.5a2.25 2.25 0 0 1 0 4.5M10 19V7.75m6 4.5V1m0 11.25a2.25 2.25 0 1 0 0 4.5 2.25 2.25 0 0 0 0-4.5ZM16 19v-2"/>
    </svg>
</button>

<style>
    * { box-sizing: border-box; }
    body {
        font: 16px Arial;
    }



    .autocomplete-items {
        position: absolute;
        border: 1px solid #d4d4d4;
        border-bottom: none;
        border-top: none;
        z-index: 60;
        /*position the autocomplete items to be the same width as the container:*/
        top: 100%;
        left: 0;
        right: 0;
    }
    .autocomplete-items div {
        padding: 10px;
        cursor: pointer;
        background-color: #fff;
        border-bottom: 1px solid #d4d4d4;
    }
    .autocomplete-items div:hover {
        /*when hovering an item:*/
        background-color: #e9e9e9;
    }
    .autocomplete-active {
        /*when navigating through the items using the arrow keys:*/
        background-color: DodgerBlue !important;
        color: #ffffff;
    }

</style>


<div id="crud-modal"  tabindex="-1" aria-hidden="true" class="hidden  overflow-y-auto overflow-x-hidden z-50 fixed top-0 right-0 left-0  justify-center items-center w-full md:inset-0 h-[calc(100%-1rem)] max-h-full">
    <div class=" relative p-4 w-full max-w-2xl max-h-full">
        <!-- Modal content -->
        <div class=" bg-cuiBlack relative  rounded-lg shadow dark:bg-gray-700">
            <!-- Modal header -->
            <div class="flex items-center justify-between p-4 md:p-5 border-b rounded-t dark:border-gray-600">
                <h3 class="text-lg font-semibold text-white">
                    Filtres
                </h3>
                <button type="button" class="text-cuiGrayLight bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ms-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white" data-modal-hide="crud-modal">
                    <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
                    </svg>
                </button>
            </div>
            <!-- Modal body -->
            <form id="myForm" method="post" class="p-4 md:p-5 ">
                <div class="grid gap-4 mb-4 grid-cols-2">


                        <!-- Ingrédients -->

                        <div class="col-span-2 relative inline-block	" >
                            <label for="ingredients" class="block mb-2 text-sm font-medium text-white">Ingrédients</label>
                            <input type="text" id="ing" class=" autocomplete bg-cuiGray text-white text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5">
                         <div  class="buttons flex flex-wrap "></div>

                    </div>

                        <!-- Catégories -->
                        <div class="col-span-2 relative inline-block">
                            <label for="categories" class="block mb-2 text-sm fbg-cuiGray border-solid rounded-lg -medium text-white">Catégories</label>
                            <div class="bg-cuiGray mr-5 flex flex-wrap text-white text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5">
                                {% for categorie in categories %}
                                    <label class=" flex  items-center mb-1">
                                        <span class="text-sm mr-1 text-white capitalize whitespace-nowrap">{{ categorie.nomCatRecette }}</span>
                                        <input type="checkbox" name="categorie[]" value="{{ categorie.id }}" class="rounded text-primary-600 focus:ring-primary-600 focus:border-primary-600 mr-2">

                                    </label>
                                {% endfor %}
                            </div>
                        </div>

                        <!-- Allèrgenes -->

                        <div class="col-span-2 sm:col-span-1">
                            <label for="allergenes" class="block mb-2 text-sm font-medium text-white">Allergènes</label>
                            <div class="bg-cuiGray text-white text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5">
                                {% for allergene in allergenes %}
                                    <label class="flex items-center mb-1">
                                        <input type="checkbox" name="allergene[]" value="{{ allergene.id }}" class="rounded text-primary-600 focus:ring-primary-600 focus:border-primary-600 mr-2">
                                        <span class="text-sm text-white capitalize">{{ allergene.nomAller }}</span>
                                    </label>
                                {% endfor %}
                            </div>
                        </div>


                        <!-- Difficultés -->

                        <div class="col-span-2 sm:col-span-1">
                            <label for="difficultes" class="block mb-2 text-sm font-medium text-white dark:text-white">Difficultés</label>
                            <div class="bg-cuiGray text-white text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5">
                                {% set  difficultyName = ['Facile', 'Moyen', 'Difficile'] %}
                                    {% for i in range(1, 3) %}
                                        <label class="flex items-center mb-1">
                                            <input type="checkbox" name="difficulte[]" value="{{ i }}" class="rounded text-primary-600 focus:ring-primary-600 focus:border-primary-600 mr-2">
                                            <span class="text-sm text-white">{{difficultyName[i-1]}}</span>
                                        </label>
                                    {% endfor %}
                            </div>
                        
                        <!-- Temps -->

                            <label for="temps" class="block mb-2 text-sm font-medium text-white dark:text-white">Temps</label>
                            <div class="bg-cuiGray text-white text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5">
                                {% set  tempsName = ['Moins de 20 Minutes', 'Entre 20 et 40 Minutes', 'Plus de 40 Minutes'] %}
                                {% set  tempsValue = ['<= 20', 'BETWEEN 20 AND 40', '>= 40'] %}
                                {% for i in range(1, 3) %}

                                <label class="flex items-center mb-1">
                                    <input type="checkbox" name="temps[]" value="{{tempsValue[i-1]}}" class="rounded text-primary-600 focus:ring-primary-600 focus:border-primary-600 mr-2">
                                    <span class="text-sm text-white">{{tempsName[i-1]}}</span>
                                </label>
                                {% endfor %}
                            </div>


                        <!-- Notes -->

                            <label for="notes" class="block mb-2 text-sm font-medium text-white dark:text-white">Note</label>
                            <div class="bg-cuiGray text-white text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5">
                                {% for y in range(1, 5) %}

                                <label class="flex items-center mb-1">
                                    <input type="checkbox" name="note" value="{{ y }}" class="rounded text-primary-600 focus:ring-primary-600 focus:border-primary-600 mr-2">
                                    {% for i in range(1, 5) %}
                                        {% set starColor = y >= i ? 'text-yellow-300' : 'text-gray-500' %}
                                        <svg class="w-4 h-4 me-1 {{ starColor }}" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 22 20">
                                        <path d="M20.924 7.625a1.523 1.523 0 0 0-1.238-1.044l-5.051-.734-2.259-4.577a1.534 1.534 0 0 0-2.752 0L7.365 5.847l-5.051.734A1.535 1.535 0 0 0 1.463 9.2l3.656 3.563-.863 5.031a1.532 1.532 0 0 0 2.226 1.616L11 17.033l4.518 2.375a1.534 1.534 0 0 0 2.226-1.617l-.863-5.03L20.537 9.2a1.523 1.523 0 0 0 .387-1.575Z"/>
                                    </svg>
                                    {% endfor %}
                                </label>

                                {% endfor %}
                            </div>


                        </div>
                    </div>
                    <button type="button" data-modal-hide="crud-modal" onclick="saveForm()"   class=" text-white w-full	place-content-center	 inline-flex items-center bg-cuiOrange hover:bg-cuiOrangeLight focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                        Sauvegarde des filtres
                    </button>
            </form>
        </div>
    </div>
</div>


<script>

    var ingredientsList = []


    {%for ingredient in ingredients %}
    ingredientsList.push(["{{ ingredient.id }}","{{ ingredient.nomIngr }}"])
    {% endfor %}





    function saveForm(){
        const form = document.getElementById("myForm");
        const buttons = form.querySelectorAll("button[name='ingredient']");

        buttons.forEach(button => {
            const input = document.createElement("input");
            input.setAttribute("type", "hidden");
            if (button.className==='button_on mr-2 whitespace-nowrap text-black text-sm')
            {
                input.setAttribute("name", "ingredient_oui[]");
            }
            else{
                input.setAttribute("name", "ingredient_non[]");
            }
            input.setAttribute("value",  button.value);
            form.appendChild(input);
        });
    }

    function switchColor(button)
    {
        if (button.className==='button_on mr-2 whitespace-nowrap text-black text-sm'
        )
        {
            button.parentNode.className = 'flex mt-2 mr-2 bg-red-500 w-fit rounded-lg focus:ring-primary-600 focus:border-primary-600 block p-2.5'
            button.className='button_off mr-2 whitespace-nowrap text-black text-sm'
        }
        else
        {
            button.parentNode.className = 'flex mt-2 mr-2 bg-green-400 w-fit rounded-lg focus:ring-primary-600 focus:border-primary-600 block p-2.5'
            button.className='button_on mr-2 whitespace-nowrap text-black text-sm'
        }


    }

    function removeButton(button)
    {

        ingredientsList.push([button.parentNode.querySelector("button[name='ingredient']").value,button.parentNode.querySelector("button[name='ingredient']").innerHTML]);
        button.parentNode.remove();


    }



    function autocomplete(inp, arr) {
        /*the autocomplete function takes two arguments,
        the text field element and an array of possible autocompleted values:*/
        var currentFocus;
        /*execute a function when someone writes in the text field:*/
        inp.addEventListener("input", function(e) {
            var a, b, i, val = this.value;
            /*close any already open lists of autocompleted values*/
            closeAllLists();
            if (!val) { return false;}
            currentFocus = -1;
            /*create a DIV element that will contain the items (values):*/
            a = document.createElement("DIV");
            a.setAttribute("id", this.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            /*append the DIV element as a child of the autocomplete container:*/
            this.parentNode.appendChild(a);
            /*for each item in the array...*/
            for (i = 0; i < arr.length; i++) {
                const bool = false;
                /*check if the item starts with the same letters as the text field value:*/
                if (arr[i][1].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                    /*create a DIV element for each matching element:*/
                    b = document.createElement("DIV");
                    /*make the matching letters bold:*/
                    b.innerHTML = "<strong>" + arr[i][1].substr(0, val.length) + "</strong>";
                    b.innerHTML += arr[i][1].substr(val.length);
                    /*insert a input field that will hold the current array item's value:*/
                    b.innerHTML += "<input type='hidden' value='" + arr[i][0] + "' name='" + arr[i][1] + "'>";
                    /*execute a function when someone clicks on the item value (DIV element):*/
                    b.addEventListener("click", function(e) {
                        /*insert the value for the autocomplete text field:*/
                        inp.value = "";
                        const ingrName = this.getElementsByTagName("input")[0].name;
                        const ingrValue = this.getElementsByTagName("input")[0].value;
                        ingredientsList.splice(i, 1);
                        const place = document.querySelector('.buttons');


                        const ingredient = document.createElement('div');
                        ingredient.className = 'flex mt-2 mr-2 bg-green-400 w-fit rounded-lg focus:ring-primary-600 focus:border-primary-600 block p-2.5';


                        const button = document.createElement('button');
                        button.type = 'button';
                        button.setAttribute("onclick", 'switchColor(this);');
                        button.className ='button_on mr-2 whitespace-nowrap text-black text-sm';
                        button.name = 'ingredient';
                        button.value = ingrValue;
                        button.innerHTML = ingrName;

                        const close = document.createElement('button');
                        close.type = 'button';
                        close.setAttribute("onclick", 'removeButton(this);');
                        close.innerHTML = "<svg class=\'w-3 h-3 text-gray-800 dark:text-white\' aria-hidden=\'true\' xmlns=\'http://www.w3.org/2000/svg\' fill=\'none\' viewBox=\'0 0 14 14\'> <path stroke=\'currentColor\' stroke-linecap=\'round\' stroke-linejoin=\'round\' stroke-width=\'2\' d=\'m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6\'/> </svg>";

                        ingredient.appendChild(button);
                        ingredient.appendChild(close);
                        place.appendChild(ingredient);


                        const index = ingredientsList.findIndex(item => item[0] === ingrValue);

                        if (index > -1) {
                            // Remove the clicked ingredient from the ingredientsList
                            ingredientsList.splice(index, 1);
                        }

                        // Creating and appending the button remains the same

                        // Remove the clicked item from the autocomplete dropdown
                        this.parentNode.removeChild(this);
                        closeAllLists();

                    });
                    a.appendChild(b);
                }
            }
        });
        /*execute a function presses a key on the keyboard:*/
        inp.addEventListener("keydown", function(e) {
            var x = document.getElementById(this.id + "autocomplete-list");
            if (x) x = x.getElementsByTagName("div");
            if (e.keyCode == 40) {
                /*If the arrow DOWN key is pressed,
                increase the currentFocus variable:*/
                currentFocus++;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 38) { //up
                /*If the arrow UP key is pressed,
                decrease the currentFocus variable:*/
                currentFocus--;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 13) {
                /*If the ENTER key is pressed, prevent the form from being submitted,*/
                e.preventDefault();
                if (currentFocus > -1) {
                    /*and simulate a click on the "active" item:*/
                    if (x) x[currentFocus].click();
                }
            }
        });
        function addActive(x) {
            /*a function to classify an item as "active":*/
            if (!x) return false;
            /*start by removing the "active" class on all items:*/
            removeActive(x);
            if (currentFocus >= x.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = (x.length - 1);
            /*add class "autocomplete-active":*/
            x[currentFocus].classList.add("autocomplete-active");
        }
        function removeActive(x) {
            /*a function to remove the "active" class from all autocomplete items:*/
            for (var i = 0; i < x.length; i++) {
                x[i].classList.remove("autocomplete-active");
            }
        }
        function closeAllLists(elmnt) {
            /*close all autocomplete lists in the document,
            except the one passed as an argument:*/
            var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < x.length; i++) {
                if (elmnt != x[i] && elmnt != inp) {
                    x[i].parentNode.removeChild(x[i]);
                }
            }
        }
        /*execute a function when someone clicks in the document:*/
        document.addEventListener("click", function (e) {
            closeAllLists(e.target);
        });
    }


    /*Utilisation du script  d'autocomplétion*/
    autocomplete(document.getElementById("ing"), ingredientsList);


    /*Utilisation du script  d'autocomplétion*/

    var search = document.getElementById("search-navbar");
    const form = document.getElementById("myForm");

    // Execute a function when the user presses a key on the keyboard
    search.addEventListener("keypress", function(event) {
        // If the user presses the "Enter" key on the keyboard
        if (event.key === "Enter") {
            // Cancel the default action, if needed
            event.preventDefault();
            // Trigger the button element with a click
            const input = document.createElement("input");
            input.setAttribute("type", "hidden");
            input.setAttribute("name", "search");
            input.setAttribute("value",  search.value);
            form.appendChild(input);
            form.submit();



        }
    });

</script>